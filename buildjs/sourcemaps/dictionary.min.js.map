{"version":3,"sources":["dictionary.min.js"],"names":["Dictionary","object","property","hasOwnProperty","this","prototype","clone","result","exists","key","keys","push","values","tryAdd","value","isAdd","tryUpdate","isUpdate","tryDelete","isDelete"],"mappings":"AAAA,YACA,IAAIA,YAAc,WACd,QAASA,GAAWC,GAChB,GAAc,MAAVA,EACA,IAAK,GAAIC,KAAYD,GACbA,EAAOE,eAAeD,KACtBE,KAAKF,GAAYD,EAAOC,IA+ExC,MAvEAF,GAAWK,UAAUC,MAAQ,WACzB,GAAIC,GAAS,GAAIP,GAAWI,KAC5B,OAAOG,IAMXP,EAAWK,UAAUG,OAAS,SAAUC,GACpC,GAAIF,GAASH,KAAKD,eAAeM,EACjC,OAAOF,IAKXP,EAAWK,UAAUK,KAAO,WACxB,GAAIH,KACJ,KAAK,GAAIE,KAAOL,MACRA,KAAKI,OAAOC,IACZF,EAAOI,KAAKF,EAGpB,OAAOF,IAKXP,EAAWK,UAAUO,OAAS,WAC1B,GAAIL,KACJ,KAAK,GAAIE,KAAOL,MACRA,KAAKI,OAAOC,IACZF,EAAOI,KAAKP,KAAKK,GAGzB,OAAOF,IAOXP,EAAWK,UAAUQ,OAAS,SAAUJ,EAAKK,GACzC,GAAIC,IAASX,KAAKI,OAAOC,IAA2B,mBAAZ,EAIxC,OAHIM,KACAX,KAAKK,GAAOK,GAETC,GAOXf,EAAWK,UAAUW,UAAY,SAAUP,EAAKK,GAC5C,GAAIG,GAAWb,KAAKI,OAAOC,IAA2B,mBAAZ,EAI1C,OAHIQ,KACAb,KAAKK,GAAOK,GAETG,GAMXjB,EAAWK,UAAUa,UAAY,SAAUT,GACvC,GAAIU,GAAWf,KAAKI,OAAOC,EAI3B,OAHIU,UACOf,MAAKK,GAETU,GAEJnB","file":"dictionary.min.js","sourcesContent":["'use-strict';\nvar Dictionary = (function () {\n    function Dictionary(object) {\n        if (object != null) {\n            for (var property in object) {\n                if (object.hasOwnProperty(property)) {\n                    this[property] = object[property];\n                }\n            }\n        }\n    }\n    /**\n     * Returns a copy of this object.\n     */\n    Dictionary.prototype.clone = function () {\n        var result = new Dictionary(this);\n        return result;\n    };\n    /**\n     * Checks if the key exists.\n     * @param {string} key\n     */\n    Dictionary.prototype.exists = function (key) {\n        var result = this.hasOwnProperty(key);\n        return result;\n    };\n    /**\n     * Returns all the keys.\n     */\n    Dictionary.prototype.keys = function () {\n        var result = [];\n        for (var key in this) {\n            if (this.exists(key)) {\n                result.push(key);\n            }\n        }\n        return result;\n    };\n    /**\n     * Returns all the values.\n     */\n    Dictionary.prototype.values = function () {\n        var result = [];\n        for (var key in this) {\n            if (this.exists(key)) {\n                result.push(this[key]);\n            }\n        }\n        return result;\n    };\n    /**\n     * Adds a the value if the key doesn't exist.\n     * @param {string} key\n     * @param {any} value\n     */\n    Dictionary.prototype.tryAdd = function (key, value) {\n        var isAdd = !this.exists(key) && typeof (value) !== 'undefined';\n        if (isAdd) {\n            this[key] = value;\n        }\n        return isAdd;\n    };\n    /**\n     * Updates the value if the key exists.\n     * @param {string} key\n     * @param {any} value\n     */\n    Dictionary.prototype.tryUpdate = function (key, value) {\n        var isUpdate = this.exists(key) && typeof (value) !== 'undefined';\n        if (isUpdate) {\n            this[key] = value;\n        }\n        return isUpdate;\n    };\n    /**\n     * Deletes the item if the key exists.\n     * @param {string} key\n     */\n    Dictionary.prototype.tryDelete = function (key) {\n        var isDelete = this.exists(key);\n        if (isDelete) {\n            delete this[key];\n        }\n        return isDelete;\n    };\n    return Dictionary;\n}());\n"],"sourceRoot":"/source/"}