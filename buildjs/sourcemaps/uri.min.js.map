{"version":3,"sources":["uri.min.js"],"names":["Uri","this","protocol","location","host","hostname","port","path","removeTrailingSlash","pathname","query","search","replace","hash","prototype","getBase","base","getOrigin","url","getHref","href","queryString","getQueryString","length","hashString","getHash","getParameters","queryDictionary","result","params","split","i","keyValue","key","value","push","DictionaryItem","Dictionary","getParameter","name","lastIndex","lastChar","charAt","slice"],"mappings":"AAAA,YACA,IAAIA,KAAO,WACP,QAASA,KACLC,KAAKC,SAAWC,SAASD,SACzBD,KAAKG,KAAOD,SAASE,SACrBJ,KAAKK,KAAOH,SAASG,MAAQ,MAC7BL,KAAKM,KAAON,KAAKO,oBAAoBL,SAASM,UAC9CR,KAAKS,MAAQP,SAASQ,OAAOC,QAAQ,IAAK,IAC1CX,KAAKY,KAAOV,SAASU,KAAKD,QAAQ,IAAK,IA2D3C,MAzDAZ,GAAIc,UAAUC,QAAU,WAIpB,MAHiB,OAAbd,KAAKe,OACLf,KAAKe,KAAOf,KAAKC,SAAW,KAAOD,KAAKG,KAAO,IAAMH,KAAKK,MAEvDL,KAAKe,MAEhBhB,EAAIc,UAAUG,UAAY,WAItB,MAHgB,OAAZhB,KAAKiB,MACLjB,KAAKiB,IAAM,GAAKjB,KAAKc,UAAYd,KAAKM,MAEnCN,KAAKiB,KAEhBlB,EAAIc,UAAUK,QAAU,WACpB,GAAiB,MAAblB,KAAKmB,KAAc,CACnB,GAAIC,GAAcpB,KAAKqB,iBAAiBC,OAAS,EAC3C,IAAMtB,KAAKqB,iBACX,GACFE,EAAavB,KAAKwB,UAAUF,OAAS,EACnC,IAAMtB,KAAKwB,UACX,EACNxB,MAAKmB,KAAO,GAAKnB,KAAKgB,YAAcI,EAAcG,EAEtD,MAAOvB,MAAKmB,MAEhBpB,EAAIc,UAAUQ,eAAiB,WAC3B,MAAOrB,MAAKS,OAEhBV,EAAIc,UAAUY,cAAgB,WAC1B,GAA4B,MAAxBzB,KAAK0B,gBAAyB,CAG9B,IAAK,GAFDC,MACAC,EAAS5B,KAAKS,MAAMoB,MAAM,KACrBC,EAAI,EAAGA,EAAIF,EAAON,SAAUQ,EAAG,CACpC,GAAIC,GAAWH,EAAOE,GAAGD,MAAM,KAC3BG,EAAMD,EAAS,GACfE,EAAQF,EAAS,EACrBJ,GAAOO,KAAK,GAAIC,gBAAeH,EAAKC,IAExCjC,KAAK0B,gBAAkB,GAAIU,YAAWT,GAE1C,MAAO3B,MAAK0B,iBAEhB3B,EAAIc,UAAUwB,aAAe,SAAUC,GACnC,MAAOtC,MAAKyB,gBAAgBa,IAEhCvC,EAAIc,UAAUW,QAAU,WACpB,MAAOxB,MAAKY,MAEhBb,EAAIc,UAAUN,oBAAsB,SAAUD,GAC1C,GAAIiC,GAAYjC,EAAKgB,OAAS,CAC9B,IAAIiB,GAAa,EAAG,CAChB,GAAIC,GAAWlC,EAAKmC,OAAOF,EACV,OAAbC,GACAlC,EAAKoC,MAAMH,GAGnB,MAAOjC,IAEJP","file":"uri.min.js","sourcesContent":["'use-strict';\nvar Uri = (function () {\n    function Uri() {\n        this.protocol = location.protocol;\n        this.host = location.hostname;\n        this.port = location.port || '443';\n        this.path = this.removeTrailingSlash(location.pathname);\n        this.query = location.search.replace('?', '');\n        this.hash = location.hash.replace('#', '');\n    }\n    Uri.prototype.getBase = function () {\n        if (this.base == null) {\n            this.base = this.protocol + \"//\" + this.host + \":\" + this.port;\n        }\n        return this.base;\n    };\n    Uri.prototype.getOrigin = function () {\n        if (this.url == null) {\n            this.url = \"\" + this.getBase() + this.path;\n        }\n        return this.url;\n    };\n    Uri.prototype.getHref = function () {\n        if (this.href == null) {\n            var queryString = this.getQueryString().length > 0\n                ? \"?\" + this.getQueryString()\n                : '';\n            var hashString = this.getHash().length > 0\n                ? \"#\" + this.getHash()\n                : '';\n            this.href = \"\" + this.getOrigin() + queryString + hashString;\n        }\n        return this.href;\n    };\n    Uri.prototype.getQueryString = function () {\n        return this.query;\n    };\n    Uri.prototype.getParameters = function () {\n        if (this.queryDictionary == null) {\n            var result = [];\n            var params = this.query.split('&');\n            for (var i = 0; i < params.length; ++i) {\n                var keyValue = params[i].split('=');\n                var key = keyValue[0];\n                var value = keyValue[1];\n                result.push(new DictionaryItem(key, value));\n            }\n            this.queryDictionary = new Dictionary(result);\n        }\n        return this.queryDictionary;\n    };\n    Uri.prototype.getParameter = function (name) {\n        return this.getParameters()[name];\n    };\n    Uri.prototype.getHash = function () {\n        return this.hash;\n    };\n    Uri.prototype.removeTrailingSlash = function (path) {\n        var lastIndex = path.length - 1;\n        if (lastIndex >= 0) {\n            var lastChar = path.charAt(lastIndex);\n            if (lastChar === '/') {\n                path.slice(lastIndex);\n            }\n        }\n        return path;\n    };\n    return Uri;\n}());\n"],"sourceRoot":"/source/"}