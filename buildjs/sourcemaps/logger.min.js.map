{"version":3,"sources":["logger.min.js"],"names":["Logger","urlHelper","this","levels","INFO","VERBOSE","parameter","getParameter","level","getLevelObject","value","prototype","log","args","_i","arguments","length","console","apply","logVerbose","logMetric","name","fn","performance","tStart","now","result","time","unshift","push","getLevelsEnum","getLevelValue","id","getLevelName","getCurrentLevel","getCurrentLevelName","toString","property","hasOwnProperty","toUpperCase"],"mappings":"AAAA,YACA,IAAIA,QAAU,WACV,QAASA,GAAOC,GACZC,KAAKD,UAAYA,EACjBC,KAAKC,QACDC,KAAM,EACNC,QAAS,EAEb,IAAIC,GAAYL,EAAUM,aAAa,UACvCL,MAAKM,MAAqB,MAAbF,EACPJ,KAAKC,OAAOC,KACZF,KAAKO,eAAeH,GAAWI,MAsEzC,MApEAV,GAAOW,UAAUC,IAAM,WAEnB,IAAK,GADDC,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAEzBZ,MAAKM,OAASN,KAAKC,OAAOC,MAC1Ba,QAAQL,IAAIM,MAAMD,QAASJ,IAGnCb,EAAOW,UAAUQ,WAAa,WAE1B,IAAK,GADDN,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAEzBZ,MAAKM,OAASN,KAAKC,OAAOE,SAC1BH,KAAKU,IAAIM,MAAMhB,KAAMW,IAG7Bb,EAAOW,UAAUS,UAAY,SAAUC,EAAMC,GAEzC,IAAK,GADDT,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAE7B,IAAmB,MAAfS,YAEA,WADArB,MAAKU,IAAI,yBAA2BW,YAAc,IAGtD,IAAIC,GAASD,YAAYE,MACrBC,EAASJ,IACTK,EAAOJ,YAAYE,MAAQD,CAI/B,OAHAX,GAAKe,QAAQP,EAAO,KACpBR,EAAKgB,KAAK,KAAOF,EAAO,OACxBzB,KAAKiB,WAAWD,MAAMhB,KAAMW,GACrBa,GAEX1B,EAAOW,UAAUmB,cAAgB,WAC7B,MAAO5B,MAAKC,QAEhBH,EAAOW,UAAUoB,cAAgB,SAAUC,GACvC,MAAO9B,MAAKO,eAAeY,MAAMX,OAErCV,EAAOW,UAAUsB,aAAe,SAAUD,GACtC,MAAO9B,MAAKO,eAAeuB,GAAIX,MAEnCrB,EAAOW,UAAUuB,gBAAkB,WAC/B,MAAOhC,MAAKM,OAEhBR,EAAOW,UAAUwB,oBAAsB,WACnC,MAAOjC,MAAK+B,aAAa/B,KAAKM,QAElCR,EAAOW,UAAUF,eAAiB,SAAUuB,GACxC,GAAIN,IAAWL,KAAM,OAAQX,MAAOR,KAAKC,OAAOC,KAChD,IAAoB,gBAAT,IAAqC,gBAAT,GAEnC,MAAOsB,EAEXM,GAAKA,EAAGI,UACR,KAAK,GAAIC,KAAYnC,MAAKC,OAClBD,KAAKC,OAAOmC,eAAeD,KACvBL,EAAGO,gBAAkBF,EAASE,eAC3BP,GAAM9B,KAAKC,OAAOkC,KACrBX,EAAOL,KAAOgB,EACdX,EAAOhB,MAAQR,KAAKC,OAAOkC,IAIvC,OAAOX,IAEJ1B","file":"logger.min.js","sourcesContent":["'use-strict';\nvar Logger = (function () {\n    function Logger(urlHelper) {\n        this.urlHelper = urlHelper;\n        this.levels = {\n            INFO: 0,\n            VERBOSE: 1\n        };\n        var parameter = urlHelper.getParameter('--level');\n        this.level = parameter == null\n            ? this.levels.INFO\n            : this.getLevelObject(parameter).value;\n    }\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.INFO) {\n            console.log.apply(console, args);\n        }\n    };\n    Logger.prototype.logVerbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.VERBOSE) {\n            this.log.apply(this, args);\n        }\n    };\n    Logger.prototype.logMetric = function (name, fn) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (performance == null) {\n            this.log(\"Error: Performance is \" + performance + \".\");\n            return;\n        }\n        var tStart = performance.now();\n        var result = fn();\n        var time = performance.now() - tStart;\n        args.unshift(name + \":\");\n        args.push(\"- \" + time + \" ms\");\n        this.logVerbose.apply(this, args);\n        return result;\n    };\n    Logger.prototype.getLevelsEnum = function () {\n        return this.levels;\n    };\n    Logger.prototype.getLevelValue = function (id) {\n        return this.getLevelObject(name).value;\n    };\n    Logger.prototype.getLevelName = function (id) {\n        return this.getLevelObject(id).name;\n    };\n    Logger.prototype.getCurrentLevel = function () {\n        return this.level;\n    };\n    Logger.prototype.getCurrentLevelName = function () {\n        return this.getLevelName(this.level);\n    };\n    Logger.prototype.getLevelObject = function (id) {\n        var result = { name: 'INFO', value: this.levels.INFO };\n        if (typeof (id) !== 'string' && typeof (id) !== 'number') {\n            // TODO: Log error?\n            return result;\n        }\n        id = id.toString();\n        for (var property in this.levels) {\n            if (this.levels.hasOwnProperty(property)) {\n                if (id.toUpperCase() === property.toUpperCase()\n                    || id == this.levels[property]) {\n                    result.name = property;\n                    result.value = this.levels[property];\n                }\n            }\n        }\n        return result;\n    };\n    return Logger;\n}());\n"],"sourceRoot":"/source/"}