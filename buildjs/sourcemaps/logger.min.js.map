{"version":3,"sources":["logger.min.js"],"names":["Logger","getParameter","this","levels","INFO","VERBOSE","parameter","level","getLevelObject","value","prototype","log","args","_i","arguments","length","console","apply","logVerbose","logMetric","name","fn","performance","tStart","now","result","time","unshift","push","getLevelsEnum","getLevelValue","id","getLevelName","getCurrentLevel","getCurrentLevelName","toString","property","hasOwnProperty","toUpperCase"],"mappings":"AAAA,YACA,IAAIA,QAAU,WACV,QAASA,GAAOC,GACZC,KAAKC,QACDC,KAAM,EACNC,QAAS,EAEb,IAAIC,GAAYL,EAAa,UAC7BC,MAAKK,MAAqB,MAAbD,EACPJ,KAAKC,OAAOC,KACZF,KAAKM,eAAeF,GAAWG,MAwEzC,MAtEAT,GAAOU,UAAUC,IAAM,WAEnB,IAAK,GADDC,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAEzBX,MAAKK,OAASL,KAAKC,OAAOC,MAC1BY,QAAQL,IAAIM,MAAMD,QAASJ,IAGnCZ,EAAOU,UAAUQ,WAAa,WAE1B,IAAK,GADDN,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAEzBX,MAAKK,OAASL,KAAKC,OAAOE,SAC1BH,KAAKS,IAAIM,MAAMf,KAAMU,IAG7BZ,EAAOU,UAAUS,UAAY,SAAUC,EAAMC,GAEzC,IAAK,GADDT,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAE7B,IAAmB,MAAfS,YAEA,WADApB,MAAKS,IAAI,yBAA2BW,YAAc,IAGtD,IAAIC,GAASD,YAAYE,MACrBC,EAASJ,IACTK,EAAOJ,YAAYE,MAAQD,CAI/B,OAHAX,GAAKe,QAAQP,EAAO,KACpBR,EAAKgB,KAAK,KAAOF,EAAO,OACxBxB,KAAKgB,WAAWD,MAAMf,KAAMU,GACrBa,GAEXzB,EAAOU,UAAUmB,cAAgB,WAC7B,MAAO3B,MAAKC,QAEhBH,EAAOU,UAAUoB,cAAgB,SAAUC,GACvC,MAAO7B,MAAKM,eAAeY,MAAMX,OAErCT,EAAOU,UAAUsB,aAAe,SAAUD,GACtC,MAAO7B,MAAKM,eAAeuB,GAAIX,MAEnCpB,EAAOU,UAAUuB,gBAAkB,WAC/B,MAAO/B,MAAKK,OAEhBP,EAAOU,UAAUwB,oBAAsB,WACnC,MAAOhC,MAAK8B,aAAa9B,KAAKK,QAElCP,EAAOU,UAAUF,eAAiB,SAAUuB,GACxC,GAAoB,gBAAT,IAAqC,gBAAT,GAAvC,CAIAA,EAAKA,EAAGI,UACR,IAAIV,EACJ,KAAK,GAAIW,KAAYlC,MAAKC,OAClBD,KAAKC,OAAOkC,eAAeD,KACvBL,EAAGO,gBAAkBF,EAASE,eAC3BP,GAAM7B,KAAKC,OAAOiC,KACrBX,GACIL,KAAMgB,EACN3B,MAAOP,KAAKC,OAAOiC,KAKnC,OAAOX,KAEJzB","file":"logger.min.js","sourcesContent":["'use-strict';\nvar Logger = (function () {\n    function Logger(getParameter) {\n        this.levels = {\n            INFO: 0,\n            VERBOSE: 1\n        };\n        var parameter = getParameter('--level');\n        this.level = parameter == null\n            ? this.levels.INFO\n            : this.getLevelObject(parameter).value;\n    }\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.INFO) {\n            console.log.apply(console, args);\n        }\n    };\n    Logger.prototype.logVerbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.VERBOSE) {\n            this.log.apply(this, args);\n        }\n    };\n    Logger.prototype.logMetric = function (name, fn) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (performance == null) {\n            this.log(\"Error: Performance is \" + performance + \".\");\n            return;\n        }\n        var tStart = performance.now();\n        var result = fn();\n        var time = performance.now() - tStart;\n        args.unshift(name + \":\");\n        args.push(\"- \" + time + \" ms\");\n        this.logVerbose.apply(this, args);\n        return result;\n    };\n    Logger.prototype.getLevelsEnum = function () {\n        return this.levels;\n    };\n    Logger.prototype.getLevelValue = function (id) {\n        return this.getLevelObject(name).value;\n    };\n    Logger.prototype.getLevelName = function (id) {\n        return this.getLevelObject(id).name;\n    };\n    Logger.prototype.getCurrentLevel = function () {\n        return this.level;\n    };\n    Logger.prototype.getCurrentLevelName = function () {\n        return this.getLevelName(this.level);\n    };\n    Logger.prototype.getLevelObject = function (id) {\n        if (typeof (id) !== 'string' && typeof (id) !== 'number') {\n            // TODO: Log error?\n            return;\n        }\n        id = id.toString();\n        var result;\n        for (var property in this.levels) {\n            if (this.levels.hasOwnProperty(property)) {\n                if (id.toUpperCase() === property.toUpperCase()\n                    || id == this.levels[property]) {\n                    result = {\n                        name: property,\n                        value: this.levels[property]\n                    };\n                }\n            }\n        }\n        return result;\n    };\n    return Logger;\n}());\n"],"sourceRoot":"/source/"}