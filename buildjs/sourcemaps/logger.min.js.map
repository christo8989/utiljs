{"version":3,"sources":["logger.min.js"],"names":["Logger","uriHelper","this","queryValue","parameter","levels","LoggerLevels","level","DEFAULT","Object","defineProperty","prototype","get","enumerable","configurable","name","Level","log","args","_i","arguments","length","INFO","console","apply","logVerbose","VERBOSE","logMetric","fn","performance","tStart","now","result","time","unshift","push"],"mappings":"AAEA,YACA,IAAIA,QAAU,WACV,QAASA,GAAOC,GACZC,KAAKD,UAAYA,CACjB,IAAIE,GAAaF,EAAUG,UAAU,UACrCF,MAAKG,OAAS,GAAIC,cAClBJ,KAAKK,MAAsB,MAAdJ,EACPD,KAAKG,OAAOG,QACZL,EAyEV,MAvEAM,QAAOC,eAAeV,EAAOW,UAAW,SAIpCC,IAAK,WACD,MAAOV,MAAKK,OAEhBM,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAeV,EAAOW,UAAW,aAKpCC,IAAK,WACD,MAAOV,MAAKG,OAAOU,KAAKb,KAAKc,QAEjCH,YAAY,EACZC,cAAc,IAMlBd,EAAOW,UAAUM,IAAM,WAEnB,IAAK,GADDC,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAEzBjB,MAAKc,OAASd,KAAKG,OAAOiB,MAC1BC,QAAQN,IAAIO,MAAMD,QAASL,IAOnClB,EAAOW,UAAUc,WAAa,WAE1B,IAAK,GADDP,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAEzBjB,MAAKc,OAASd,KAAKG,OAAOqB,SAC1BxB,KAAKe,IAAIO,MAAMtB,KAAMgB,IAU7BlB,EAAOW,UAAUgB,UAAY,SAAUZ,EAAMa,GAEzC,IAAK,GADDV,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAE7B,IAAmB,MAAfU,YAEA,WADA3B,MAAKe,IAAI,yBAA2BY,YAAc,IAGtD,IAAIC,GAASD,YAAYE,MACrBC,EAASJ,IACTK,EAAOJ,YAAYE,MAAQD,CAI/B,OAHAZ,GAAKgB,QAAQnB,EAAO,KACpBG,EAAKiB,KAAK,KAAOF,EAAO,OACxB/B,KAAKuB,WAAWD,MAAMtB,KAAMgB,GACrBc,GAEJhC","file":"logger.min.js","sourcesContent":["/// <reference path=\"./uri.ts\" />\n/// <reference path=\"./loggerLevels.ts\" />\n'use-strict';\nvar Logger = (function () {\n    function Logger(uriHelper) {\n        this.uriHelper = uriHelper;\n        var queryValue = uriHelper.parameter('--level');\n        this.levels = new LoggerLevels();\n        this.level = queryValue == null\n            ? this.levels.DEFAULT\n            : queryValue;\n    }\n    Object.defineProperty(Logger.prototype, \"Level\", {\n        /**\n         * Level for logging.\n         */\n        get: function () {\n            return this.level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Logger.prototype, \"LevelName\", {\n        /**\n         * Level name for logging.\n         * @param {string} name\n         */\n        get: function () {\n            return this.levels.name(this.Level);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Console logs when level is 0 (INFO) or higher.\n     * @param {...} args\n     */\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.Level >= this.levels.INFO) {\n            console.log.apply(console, args);\n        }\n    };\n    /**\n     * Console logs when level is 1 (VERBOSE) or higher.\n     * @param {...} args\n     */\n    Logger.prototype.logVerbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.Level >= this.levels.VERBOSE) {\n            this.log.apply(this, args);\n        }\n    };\n    /**\n     * Measures amount of time to execute function.\n     * Then, console logs when level is 1 (VERBOSE) or higher.\n     * @param {string} name\n     * @param {Function} fn\n     * @param {...} args\n     */\n    Logger.prototype.logMetric = function (name, fn) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (performance == null) {\n            this.log(\"Error: Performance is \" + performance + \".\");\n            return;\n        }\n        var tStart = performance.now();\n        var result = fn();\n        var time = performance.now() - tStart;\n        args.unshift(name + \":\");\n        args.push(\"- \" + time + \" ms\");\n        this.logVerbose.apply(this, args);\n        return result;\n    };\n    return Logger;\n}());\n"],"sourceRoot":"/source/"}