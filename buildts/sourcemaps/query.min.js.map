{"version":3,"sources":["query.ts"],"names":["Query","this","protocol","location","host","hostname","port","path","removeTrailingSlash","pathname","query","search","replace","hash","prototype","getBase","base","getOrigin","url","getHref","href","queryString","getQueryString","length","hashString","getHash","getParameters","queryDictionary","result","params","split","i","keyValue","key","value","push","DictionaryItem","Dictionary","getParameter","name","lastIndex","lastChar","charAt","slice"],"mappings":"AAAA,YAEA,IAAAA,OAAA,WAaI,QAAAA,KACIC,KAAKC,SAAWC,SAASD,SACzBD,KAAKG,KAAOD,SAASE,SACrBJ,KAAKK,KAAOH,SAASG,MAAQ,MAC7BL,KAAKM,KAAON,KAAKO,oBAAoBL,SAASM,UAC9CR,KAAKS,MAAQP,SAASQ,OAAOC,QAAQ,IAAK,IAC1CX,KAAKY,KAAOV,SAASU,KAAKD,QAAQ,IAAK,IAuE/C,MApEWZ,GAAAc,UAAAC,QAAP,WAKI,MAJiB,OAAbd,KAAKe,OACLf,KAAKe,KAAUf,KAAKC,SAAQ,KAAKD,KAAKG,KAAI,IAAIH,KAAKK,MAGhDL,KAAKe,MAGThB,EAAAc,UAAAG,UAAP,WAKI,MAJgB,OAAZhB,KAAKiB,MACLjB,KAAKiB,IAAM,GAAGjB,KAAKc,UAAYd,KAAKM,MAGjCN,KAAKiB,KAGTlB,EAAAc,UAAAK,QAAP,WACI,GAAiB,MAAblB,KAAKmB,KAAc,CACnB,GAAIC,GAAcpB,KAAKqB,iBAAiBC,OAAS,EAC3C,IAAItB,KAAKqB,iBACT,GACFE,EAAavB,KAAKwB,UAAUF,OAAS,EACnC,IAAItB,KAAKwB,UACT,EACNxB,MAAKmB,KAAO,GAAGnB,KAAKgB,YAAcI,EAAcG,EAGpD,MAAOvB,MAAKmB,MAGTpB,EAAAc,UAAAQ,eAAP,WACI,MAAOrB,MAAKS,OAGTV,EAAAc,UAAAY,cAAP,WACI,GAA4B,MAAxBzB,KAAK0B,gBAAyB,CAG9B,IAAK,GAFDC,MACAC,EAAS5B,KAAKS,MAAMoB,MAAM,KACrBC,EAAI,EAAGA,EAAIF,EAAON,SAAUQ,EAAG,CACpC,GAAIC,GAAWH,EAAOE,GAAGD,MAAM,KAC3BG,EAAMD,EAAS,GACfE,EAAQF,EAAS,EACrBJ,GAAOO,KAAK,GAAIC,gBAAeH,EAAKC,IAExCjC,KAAK0B,gBAAkB,GAAIU,YAAWT,GAG1C,MAAO3B,MAAK0B,iBAGT3B,EAAAc,UAAAwB,aAAP,SAAoBC,GAChB,MAAOtC,MAAKyB,gBAAgBa,IAGzBvC,EAAAc,UAAAW,QAAP,WACI,MAAOxB,MAAKY,MAGRb,EAAAc,UAAAN,oBAAR,SAA4BD,GACxB,GAAIiC,GAAYjC,EAAKgB,OAAS,CAC9B,IAAIiB,GAAa,EAAG,CAChB,GAAIC,GAAWlC,EAAKmC,OAAOF,EACV,OAAbC,GACAlC,EAAKoC,MAAMH,GAGnB,MAAOjC,IAEfP","file":"query.min.js","sourcesContent":["'use-strict';\r\n\r\nclass Query {\r\n    // https://www.domain.com:443/path/name?query=string#hash\r\n    private protocol: string; // https:\r\n    private host: string; // www.domain.com\r\n    private port: string; // 443 (default)\r\n    private path: string; // path/name\r\n    private query: string; // ?query=string\r\n    private hash: string; // hash\r\n    private base: string;\r\n    private url: string;\r\n    private href: string;\r\n    private queryDictionary: Dictionary;\r\n\r\n    public constructor() {\r\n        this.protocol = location.protocol;\r\n        this.host = location.hostname;\r\n        this.port = location.port || '443';\r\n        this.path = this.removeTrailingSlash(location.pathname);\r\n        this.query = location.search.replace('?', '');\r\n        this.hash = location.hash.replace('#', '');\r\n    }\r\n\r\n    public getBase() {\r\n        if (this.base == null) {\r\n            this.base = `${this.protocol}//${this.host}:${this.port}`;\r\n        }\r\n\r\n        return this.base;\r\n    }\r\n\r\n    public getOrigin() {\r\n        if (this.url == null) {\r\n            this.url = `${this.getBase()}${this.path}`;\r\n        }\r\n\r\n        return this.url;\r\n    }\r\n\r\n    public getHref() {\r\n        if (this.href == null) {\r\n            let queryString = this.getQueryString().length > 0\r\n                ? `?${this.getQueryString()}`\r\n                : '';\r\n            let hashString = this.getHash().length > 0\r\n                ? `#${this.getHash()}`\r\n                : '';\r\n            this.href = `${this.getOrigin()}${queryString}${hashString}`;\r\n        }\r\n\r\n        return this.href;\r\n    }\r\n\r\n    public getQueryString() {\r\n        return this.query;\r\n    }\r\n\r\n    public getParameters() {\r\n        if (this.queryDictionary == null) {\r\n            let result = [];\r\n            let params = this.query.split('&');\r\n            for (let i = 0; i < params.length; ++i) {\r\n                let keyValue = params[i].split('=');\r\n                let key = keyValue[0];\r\n                let value = keyValue[1];\r\n                result.push(new DictionaryItem(key, value));\r\n            }\r\n            this.queryDictionary = new Dictionary(result);\r\n        }\r\n\r\n        return this.queryDictionary;\r\n    }\r\n\r\n    public getParameter(name: string) {\r\n        return this.getParameters()[name];\r\n    }\r\n\r\n    public getHash() {\r\n        return this.hash;\r\n    }\r\n\r\n    private removeTrailingSlash(path: string) {\r\n        let lastIndex = path.length - 1;\r\n        if (lastIndex >= 0) {\r\n            let lastChar = path.charAt(lastIndex);\r\n            if (lastChar === '/') {\r\n                path.slice(lastIndex);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}