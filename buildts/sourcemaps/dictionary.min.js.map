{"version":3,"sources":["dictionary.ts"],"names":["Dictionary","object","property","hasOwnProperty","this","prototype","clone","result","exists","key","keys","push","values","tryAdd","value","isAdd","tryUpdate","isUpdate","tryDelete","isDelete"],"mappings":"AAAA,YAEA,IAAAA,YAAA,WAGI,QAAAA,GAAoBC,GAChB,GAAc,MAAVA,EACA,IAAK,GAAIC,KAAYD,GACbA,EAAOE,eAAeD,KACtBE,KAAKF,GAAYD,EAAOC,IAsF5C,MA7EWF,GAAAK,UAAAC,MAAP,WACI,GAAIC,GAAS,GAAIP,GAAWI,KAC5B,OAAOG,IAOJP,EAAAK,UAAAG,OAAP,SAAcC,GACV,GAAIF,GAASH,KAAKD,eAAeM,EACjC,OAAOF,IAMJP,EAAAK,UAAAK,KAAP,WACI,GAAIH,KACJ,KAAK,GAAIE,KAAOL,MACRA,KAAKI,OAAOC,IACZF,EAAOI,KAAKF,EAGpB,OAAOF,IAMJP,EAAAK,UAAAO,OAAP,WACI,GAAIL,KACJ,KAAK,GAAIE,KAAOL,MACRA,KAAKI,OAAOC,IACZF,EAAOI,KAAKP,KAAKK,GAGzB,OAAOF,IAQJP,EAAAK,UAAAQ,OAAP,SAAcJ,EAAaK,GACvB,GAAIC,IAASX,KAAKI,OAAOC,IAA0B,mBAAZ,EAIvC,OAHIM,KACAX,KAAKK,GAAOK,GAETC,GAQJf,EAAAK,UAAAW,UAAP,SAAiBP,EAAaK,GAC1B,GAAIG,GAAWb,KAAKI,OAAOC,IAA0B,mBAAZ,EAIzC,OAHIQ,KACAb,KAAKK,GAAOK,GAETG,GAOJjB,EAAAK,UAAAa,UAAP,SAAiBT,GACb,GAAIU,GAAWf,KAAKI,OAAOC,EAI3B,OAHIU,UACOf,MAAKK,GAETU,GAEfnB","file":"dictionary.min.js","sourcesContent":["'use-strict';\r\n\r\nclass Dictionary {\r\n    public constructor ();\r\n    public constructor (object: Object);\r\n    public constructor (object?) {\r\n        if (object != null) {\r\n            for (let property in object) {\r\n                if (object.hasOwnProperty(property)) {\r\n                    this[property] = object[property];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a copy of this object.\r\n     */\r\n    public clone(): Dictionary {\r\n        let result = new Dictionary(this);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Checks if the key exists.\r\n     * @param {string} key \r\n     */\r\n    public exists(key: string): boolean {\r\n        let result = this.hasOwnProperty(key);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns all the keys.\r\n     */\r\n    public keys(): string[] {\r\n        let result = [];\r\n        for (let key in this) {\r\n            if (this.exists(key)) {\r\n                result.push(key);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns all the values.\r\n     */\r\n    public values(): any[] {\r\n        let result = [];\r\n        for (let key in this) {\r\n            if (this.exists(key)) {\r\n                result.push(this[key]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds a the value if the key doesn't exist.\r\n     * @param {string} key \r\n     * @param {any} value \r\n     */\r\n    public tryAdd(key: string, value: any): boolean {\r\n        let isAdd = !this.exists(key) && typeof(value) !== 'undefined';\r\n        if (isAdd) {\r\n            this[key] = value;\r\n        }\r\n        return isAdd;\r\n    }\r\n\r\n    /**\r\n     * Updates the value if the key exists.\r\n     * @param {string} key \r\n     * @param {any} value \r\n     */\r\n    public tryUpdate(key: string, value: any): boolean {\r\n        let isUpdate = this.exists(key) && typeof(value) !== 'undefined';\r\n        if (isUpdate) {\r\n            this[key] = value;\r\n        }\r\n        return isUpdate;\r\n    }\r\n\r\n    /**\r\n     * Deletes the item if the key exists.\r\n     * @param {string} key \r\n     */\r\n    public tryDelete(key: string): boolean {\r\n        let isDelete = this.exists(key);\r\n        if (isDelete) {\r\n            delete this[key];\r\n        }\r\n        return isDelete;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}