{"version":3,"sources":["logger.ts","logger.min.js"],"names":["Logger","urlHelper","this","levels","INFO","VERBOSE","parameter","getParameter","level","getLevelObject","value","prototype","log","args","_i","arguments","length","console","apply","logVerbose","logMetric","name","fn","performance","tStart","now","result","time","unshift","push","getLevelsEnum","getLevelValue","id","getLevelName","getCurrentLevel","getCurrentLevelName","toString","property","hasOwnProperty","toUpperCase"],"mappings":"AAAA,YAEA,IAAAA,QAAA,WAQI,QAAAA,GAA2BC,GAAAC,KAAAD,UAAAA,EAPnBC,KAAAC,QACJC,KAAM,EACNC,QAAS,EAMT,IAAIC,GAAYL,EAAUM,aAAa,UACvCL,MAAKM,MAAqB,MAAbF,EACPJ,KAAKC,OAAOC,KACZF,KAAKO,eAAeH,GAAWI,MAuE7C,MApEWV,GAAAW,UAAAC,IAAP,WCFI,IDEO,GAAAC,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACHZ,MAAKM,OAASN,KAAKC,OAAOC,MAC1Ba,QAAQL,IAAIM,MAAMD,QAASJ,IAI5Bb,EAAAW,UAAAQ,WAAP,WCCI,IDDc,GAAAN,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACVZ,MAAKM,OAASN,KAAKC,OAAOE,SAC1BH,KAAKU,IAAIM,MAAMhB,KAAMW,IAItBb,EAAAW,UAAAS,UAAP,SAAiBC,EAAcC,GCI3B,IDJyC,GAAAT,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACzC,IAAmB,MAAfS,YAEA,WADArB,MAAKU,IAAI,yBAAyBW,YAAW,IAIjD,IAAIC,GAASD,YAAYE,MACrBC,EAASJ,IACTK,EAAOJ,YAAYE,MAAQD,CAM/B,OAJAX,GAAKe,QAAWP,EAAI,KACpBR,EAAKgB,KAAK,KAAKF,EAAI,OACnBzB,KAAKiB,WAAWD,MAAMhB,KAAMW,GAErBa,GAGJ1B,EAAAW,UAAAmB,cAAP,WACI,MAAO5B,MAAKC,QAGTH,EAAAW,UAAAoB,cAAP,SAAqBC,GACjB,MAAO9B,MAAKO,eAAeY,MAAMX,OAG9BV,EAAAW,UAAAsB,aAAP,SAAoBD,GAChB,MAAO9B,MAAKO,eAAeuB,GAAIX,MAG5BrB,EAAAW,UAAAuB,gBAAP,WACI,MAAOhC,MAAKM,OAGTR,EAAAW,UAAAwB,oBAAP,WACI,MAAOjC,MAAK+B,aAAa/B,KAAKM,QAG1BR,EAAAW,UAAAF,eAAR,SAAuBuB,GACnB,GAAIN,IAAWL,KAAM,OAAQX,MAAOR,KAAKC,OAAOC,KAChD,IAAmB,gBAAT,IAAoC,gBAAT,GAEjC,MAAOsB,EAGXM,GAAKA,EAAGI,UACR,KAAK,GAAIC,KAAYnC,MAAKC,OAClBD,KAAKC,OAAOmC,eAAeD,KACvBL,EAAGO,gBAAkBF,EAASE,eAC3BP,GAAM9B,KAAKC,OAAOkC,KACrBX,EAAOL,KAAOgB,EACdX,EAAOhB,MAAQR,KAAKC,OAAOkC,IAIvC,OAAOX,IAEf1B","file":"logger.min.js","sourcesContent":["'use-strict';\r\n\r\nclass Logger {\r\n    private levels = {\r\n        INFO: 0,\r\n        VERBOSE: 1,\r\n    };\r\n\r\n    private level;\r\n\r\n    public constructor(private urlHelper: Query) {\r\n        let parameter = urlHelper.getParameter('--level');\r\n        this.level = parameter == null\r\n            ? this.levels.INFO\r\n            : this.getLevelObject(parameter).value;\r\n    }\r\n\r\n    public log(...args: any[]) {\r\n        if (this.level >= this.levels.INFO) {\r\n            console.log.apply(console, args);\r\n        }\r\n    }\r\n\r\n    public logVerbose(...args: any[]) {\r\n        if (this.level >= this.levels.VERBOSE) {\r\n            this.log.apply(this, args);\r\n        }\r\n    }\r\n\r\n    public logMetric(name: string, fn: Function, ...args: any[]) {\r\n        if (performance == null) {\r\n            this.log(`Error: Performance is ${performance}.`);\r\n            return;\r\n        }\r\n\r\n        let tStart = performance.now();\r\n        let result = fn();\r\n        let time = performance.now() - tStart;\r\n\r\n        args.unshift(`${name}:`);\r\n        args.push(`- ${time} ms`);\r\n        this.logVerbose.apply(this, args);\r\n\r\n        return result;\r\n    }\r\n\r\n    public getLevelsEnum() {\r\n        return this.levels;\r\n    }\r\n\r\n    public getLevelValue(id: string) {\r\n        return this.getLevelObject(name).value;\r\n    }\r\n\r\n    public getLevelName(id: number) {\r\n        return this.getLevelObject(id).name;\r\n    }\r\n\r\n    public getCurrentLevel() {\r\n        return this.level;\r\n    }\r\n\r\n    public getCurrentLevelName() {\r\n        return this.getLevelName(this.level);\r\n    }\r\n\r\n    private getLevelObject(id: any) {\r\n        let result = { name: 'INFO', value: this.levels.INFO };\r\n        if (typeof(id) !== 'string' && typeof(id) !== 'number') {\r\n            // TODO: Log error?\r\n            return result;\r\n        }\r\n\r\n        id = id.toString();\r\n        for (let property in this.levels) {\r\n            if (this.levels.hasOwnProperty(property)) {\r\n                if (id.toUpperCase() === property.toUpperCase()\r\n                    || id == this.levels[property]) { // tslint:disable-line\r\n                    result.name = property;\r\n                    result.value = this.levels[property];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","'use-strict';\nvar Logger = (function () {\n    function Logger(urlHelper) {\n        this.urlHelper = urlHelper;\n        this.levels = {\n            INFO: 0,\n            VERBOSE: 1\n        };\n        var parameter = urlHelper.getParameter('--level');\n        this.level = parameter == null\n            ? this.levels.INFO\n            : this.getLevelObject(parameter).value;\n    }\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.INFO) {\n            console.log.apply(console, args);\n        }\n    };\n    Logger.prototype.logVerbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.VERBOSE) {\n            this.log.apply(this, args);\n        }\n    };\n    Logger.prototype.logMetric = function (name, fn) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (performance == null) {\n            this.log(\"Error: Performance is \" + performance + \".\");\n            return;\n        }\n        var tStart = performance.now();\n        var result = fn();\n        var time = performance.now() - tStart;\n        args.unshift(name + \":\");\n        args.push(\"- \" + time + \" ms\");\n        this.logVerbose.apply(this, args);\n        return result;\n    };\n    Logger.prototype.getLevelsEnum = function () {\n        return this.levels;\n    };\n    Logger.prototype.getLevelValue = function (id) {\n        return this.getLevelObject(name).value;\n    };\n    Logger.prototype.getLevelName = function (id) {\n        return this.getLevelObject(id).name;\n    };\n    Logger.prototype.getCurrentLevel = function () {\n        return this.level;\n    };\n    Logger.prototype.getCurrentLevelName = function () {\n        return this.getLevelName(this.level);\n    };\n    Logger.prototype.getLevelObject = function (id) {\n        var result = { name: 'INFO', value: this.levels.INFO };\n        if (typeof (id) !== 'string' && typeof (id) !== 'number') {\n            // TODO: Log error?\n            return result;\n        }\n        id = id.toString();\n        for (var property in this.levels) {\n            if (this.levels.hasOwnProperty(property)) {\n                if (id.toUpperCase() === property.toUpperCase()\n                    || id == this.levels[property]) {\n                    result.name = property;\n                    result.value = this.levels[property];\n                }\n            }\n        }\n        return result;\n    };\n    return Logger;\n}());\n"],"sourceRoot":"/source/"}