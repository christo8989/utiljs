{"version":3,"sources":["logger.ts","logger.min.js"],"names":["Logger","uriHelper","this","queryValue","parameter","levels","LoggerLevels","level","DEFAULT","Object","defineProperty","prototype","get","enumerable","configurable","name","Level","log","args","_i","arguments","length","INFO","console","apply","logVerbose","VERBOSE","logMetric","fn","performance","tStart","now","result","time","unshift","push"],"mappings":"AAEA,YAEA,IAAAA,QAAA,WAII,QAAAA,GAA2BC,GAAAC,KAAAD,UAAAA,CACvB,IAAIE,GAAaF,EAAUG,UAAU,UACrCF,MAAKG,OAAS,GAAIC,cAClBJ,KAAKK,MAAsB,MAAdJ,EACPD,KAAKG,OAAOG,QACZL,EA6Dd,MAvDIM,QAAAC,eAAIV,EAAAW,UAAA,SCHAC,IDGJ,WACI,MAAOV,MAAKK,OCDZM,YAAY,EACZC,cAAc,IDOlBL,OAAAC,eAAIV,EAAAW,UAAA,aCAAC,IDAJ,WACI,MAAOV,MAAKG,OAAOU,KAAKb,KAAKc,QCE7BH,YAAY,EACZC,cAAc,IDIXd,EAAAW,UAAAM,IAAP,WCII,IDJO,GAAAC,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACHjB,MAAKc,OAASd,KAAKG,OAAOiB,MAC1BC,QAAQN,IAAIO,MAAMD,QAASL,IAQ5BlB,EAAAW,UAAAc,WAAP,WCOI,IDPc,GAAAP,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACVjB,MAAKc,OAASd,KAAKG,OAAOqB,SAC1BxB,KAAKe,IAAIO,MAAMtB,KAAMgB,IAWtBlB,EAAAW,UAAAgB,UAAP,SAAiBZ,EAAca,GCU3B,IDVyC,GAAAV,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACzC,IAAmB,MAAfU,YAEA,WADA3B,MAAKe,IAAI,yBAAyBY,YAAW,IAIjD,IAAIC,GAASD,YAAYE,MACrBC,EAASJ,IACTK,EAAOJ,YAAYE,MAAQD,CAM/B,OAJAZ,GAAKgB,QAAWnB,EAAI,KACpBG,EAAKiB,KAAK,KAAKF,EAAI,OACnB/B,KAAKuB,WAAWD,MAAMtB,KAAMgB,GAErBc,GAEfhC","file":"logger.min.js","sourcesContent":["/// <reference path=\"./uri.ts\" />\r\n/// <reference path=\"./loggerLevels.ts\" />\r\n'use-strict';\r\n\r\nclass Logger {\r\n    private levels;\r\n    private level;\r\n\r\n    public constructor(private uriHelper: Uri) {\r\n        let queryValue = uriHelper.parameter('--level');\r\n        this.levels = new LoggerLevels();\r\n        this.level = queryValue == null\r\n            ? this.levels.DEFAULT\r\n            : queryValue;\r\n    }\r\n\r\n    /**\r\n     * Level for logging.\r\n     */\r\n    get Level(): string {\r\n        return this.level;\r\n    }\r\n\r\n    /**\r\n     * Level name for logging.\r\n     * @param {string} name \r\n     */\r\n    get LevelName(): string {\r\n        return this.levels.name(this.Level);\r\n    }\r\n\r\n    /**\r\n     * Console logs when level is 0 (INFO) or higher.\r\n     * @param {...} args \r\n     */\r\n    public log(...args: any[]): void {\r\n        if (this.Level >= this.levels.INFO) {\r\n            console.log.apply(console, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Console logs when level is 1 (VERBOSE) or higher.\r\n     * @param {...} args \r\n     */\r\n    public logVerbose(...args: any[]): void {\r\n        if (this.Level >= this.levels.VERBOSE) {\r\n            this.log.apply(this, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Measures amount of time to execute function.\r\n     * Then, console logs when level is 1 (VERBOSE) or higher.\r\n     * @param {string} name\r\n     * @param {Function} fn\r\n     * @param {...} args\r\n     */\r\n    public logMetric(name: string, fn: Function, ...args: any[]): any {\r\n        if (performance == null) {\r\n            this.log(`Error: Performance is ${performance}.`);\r\n            return;\r\n        }\r\n\r\n        let tStart = performance.now();\r\n        let result = fn();\r\n        let time = performance.now() - tStart;\r\n\r\n        args.unshift(`${name}:`);\r\n        args.push(`- ${time} ms`);\r\n        this.logVerbose.apply(this, args);\r\n\r\n        return result;\r\n    }\r\n}\r\n","/// <reference path=\"./uri.ts\" />\n/// <reference path=\"./loggerLevels.ts\" />\n'use-strict';\nvar Logger = (function () {\n    function Logger(uriHelper) {\n        this.uriHelper = uriHelper;\n        var queryValue = uriHelper.parameter('--level');\n        this.levels = new LoggerLevels();\n        this.level = queryValue == null\n            ? this.levels.DEFAULT\n            : queryValue;\n    }\n    Object.defineProperty(Logger.prototype, \"Level\", {\n        /**\n         * Level for logging.\n         */\n        get: function () {\n            return this.level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Logger.prototype, \"LevelName\", {\n        /**\n         * Level name for logging.\n         * @param {string} name\n         */\n        get: function () {\n            return this.levels.name(this.Level);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Console logs when level is 0 (INFO) or higher.\n     * @param {...} args\n     */\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.Level >= this.levels.INFO) {\n            console.log.apply(console, args);\n        }\n    };\n    /**\n     * Console logs when level is 1 (VERBOSE) or higher.\n     * @param {...} args\n     */\n    Logger.prototype.logVerbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.Level >= this.levels.VERBOSE) {\n            this.log.apply(this, args);\n        }\n    };\n    /**\n     * Measures amount of time to execute function.\n     * Then, console logs when level is 1 (VERBOSE) or higher.\n     * @param {string} name\n     * @param {Function} fn\n     * @param {...} args\n     */\n    Logger.prototype.logMetric = function (name, fn) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (performance == null) {\n            this.log(\"Error: Performance is \" + performance + \".\");\n            return;\n        }\n        var tStart = performance.now();\n        var result = fn();\n        var time = performance.now() - tStart;\n        args.unshift(name + \":\");\n        args.push(\"- \" + time + \" ms\");\n        this.logVerbose.apply(this, args);\n        return result;\n    };\n    return Logger;\n}());\n"],"sourceRoot":"/source/"}