{"version":3,"sources":["logger.ts","logger.min.js"],"names":["Logger","getParameter","this","levels","INFO","VERBOSE","parameter","level","getLevelObject","value","prototype","log","args","_i","arguments","length","console","apply","logVerbose","logMetric","name","fn","performance","tStart","now","result","time","unshift","push","getLevelsEnum","getLevelValue","id","getLevelName","getCurrentLevel","getCurrentLevelName","toString","property","hasOwnProperty","toUpperCase"],"mappings":"AAAA,YAEA,IAAAA,QAAA,WAQI,QAAAA,GAAmBC,GAPXC,KAAAC,QACJC,KAAM,EACNC,QAAS,EAMT,IAAIC,GAAYL,EAAa,UAC7BC,MAAKK,MAAqB,MAAbD,EACPJ,KAAKC,OAAOC,KACZF,KAAKM,eAAeF,GAAWG,MA0E7C,MAvEWT,GAAAU,UAAAC,IAAP,WCHI,IDGO,GAAAC,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACHX,MAAKK,OAASL,KAAKC,OAAOC,MAC1BY,QAAQL,IAAIM,MAAMD,QAASJ,IAI5BZ,EAAAU,UAAAQ,WAAP,WCAI,IDAc,GAAAN,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACVX,MAAKK,OAASL,KAAKC,OAAOE,SAC1BH,KAAKS,IAAIM,MAAMf,KAAMU,IAItBZ,EAAAU,UAAAS,UAAP,SAAiBC,EAAcC,GCG3B,IDHyC,GAAAT,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EACzC,IAAmB,MAAfS,YAEA,WADApB,MAAKS,IAAI,yBAAyBW,YAAW,IAIjD,IAAIC,GAASD,YAAYE,MACrBC,EAASJ,IACTK,EAAOJ,YAAYE,MAAQD,CAM/B,OAJAX,GAAKe,QAAWP,EAAI,KACpBR,EAAKgB,KAAK,KAAKF,EAAI,OACnBxB,KAAKgB,WAAWD,MAAMf,KAAMU,GAErBa,GAGJzB,EAAAU,UAAAmB,cAAP,WACI,MAAO3B,MAAKC,QAGTH,EAAAU,UAAAoB,cAAP,SAAqBC,GACjB,MAAO7B,MAAKM,eAAeY,MAAMX,OAG9BT,EAAAU,UAAAsB,aAAP,SAAoBD,GAChB,MAAO7B,MAAKM,eAAeuB,GAAIX,MAG5BpB,EAAAU,UAAAuB,gBAAP,WACI,MAAO/B,MAAKK,OAGTP,EAAAU,UAAAwB,oBAAP,WACI,MAAOhC,MAAK8B,aAAa9B,KAAKK,QAG1BP,EAAAU,UAAAF,eAAR,SAAuBuB,GACnB,GAAmB,gBAAT,IAAoC,gBAAT,GAArC,CAKAA,EAAKA,EAAGI,UAER,IAAIV,EACJ,KAAK,GAAIW,KAAYlC,MAAKC,OAClBD,KAAKC,OAAOkC,eAAeD,KACvBL,EAAGO,gBAAkBF,EAASE,eAC3BP,GAAM7B,KAAKC,OAAOiC,KACrBX,GACIL,KAAMgB,EACN3B,MAAOP,KAAKC,OAAOiC,KAKnC,OAAOX,KAEfzB","file":"logger.min.js","sourcesContent":["'use-strict';\r\n\r\nclass Logger {\r\n    private levels = {\r\n        INFO: 0,\r\n        VERBOSE: 1,\r\n    };\r\n\r\n    private level;\r\n\r\n    public constructor(getParameter: Function) {\r\n        let parameter = getParameter('--level');\r\n        this.level = parameter == null\r\n            ? this.levels.INFO\r\n            : this.getLevelObject(parameter).value;\r\n    }\r\n\r\n    public log(...args: any[]) {\r\n        if (this.level >= this.levels.INFO) {\r\n            console.log.apply(console, args);\r\n        }\r\n    }\r\n\r\n    public logVerbose(...args: any[]) {\r\n        if (this.level >= this.levels.VERBOSE) {\r\n            this.log.apply(this, args);\r\n        }\r\n    }\r\n\r\n    public logMetric(name: string, fn: Function, ...args: any[]) {\r\n        if (performance == null) {\r\n            this.log(`Error: Performance is ${performance}.`);\r\n            return;\r\n        }\r\n\r\n        let tStart = performance.now();\r\n        let result = fn();\r\n        let time = performance.now() - tStart;\r\n\r\n        args.unshift(`${name}:`);\r\n        args.push(`- ${time} ms`);\r\n        this.logVerbose.apply(this, args);\r\n\r\n        return result;\r\n    }\r\n\r\n    public getLevelsEnum() {\r\n        return this.levels;\r\n    }\r\n\r\n    public getLevelValue(id: string) {\r\n        return this.getLevelObject(name).value;\r\n    }\r\n\r\n    public getLevelName(id: number) {\r\n        return this.getLevelObject(id).name;\r\n    }\r\n\r\n    public getCurrentLevel() {\r\n        return this.level;\r\n    }\r\n\r\n    public getCurrentLevelName() {\r\n        return this.getLevelName(this.level);\r\n    }\r\n\r\n    private getLevelObject(id: any) {\r\n        if (typeof(id) !== 'string' && typeof(id) !== 'number') {\r\n            // TODO: Log error?\r\n            return;\r\n        }\r\n\r\n        id = id.toString();\r\n\r\n        let result;\r\n        for (let property in this.levels) {\r\n            if (this.levels.hasOwnProperty(property)) {\r\n                if (id.toUpperCase() === property.toUpperCase()\r\n                    || id == this.levels[property]) { // tslint:disable-line\r\n                    result = {\r\n                        name: property,\r\n                        value: this.levels[property],\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","'use-strict';\nvar Logger = (function () {\n    function Logger(getParameter) {\n        this.levels = {\n            INFO: 0,\n            VERBOSE: 1\n        };\n        var parameter = getParameter('--level');\n        this.level = parameter == null\n            ? this.levels.INFO\n            : this.getLevelObject(parameter).value;\n    }\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.INFO) {\n            console.log.apply(console, args);\n        }\n    };\n    Logger.prototype.logVerbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (this.level >= this.levels.VERBOSE) {\n            this.log.apply(this, args);\n        }\n    };\n    Logger.prototype.logMetric = function (name, fn) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (performance == null) {\n            this.log(\"Error: Performance is \" + performance + \".\");\n            return;\n        }\n        var tStart = performance.now();\n        var result = fn();\n        var time = performance.now() - tStart;\n        args.unshift(name + \":\");\n        args.push(\"- \" + time + \" ms\");\n        this.logVerbose.apply(this, args);\n        return result;\n    };\n    Logger.prototype.getLevelsEnum = function () {\n        return this.levels;\n    };\n    Logger.prototype.getLevelValue = function (id) {\n        return this.getLevelObject(name).value;\n    };\n    Logger.prototype.getLevelName = function (id) {\n        return this.getLevelObject(id).name;\n    };\n    Logger.prototype.getCurrentLevel = function () {\n        return this.level;\n    };\n    Logger.prototype.getCurrentLevelName = function () {\n        return this.getLevelName(this.level);\n    };\n    Logger.prototype.getLevelObject = function (id) {\n        if (typeof (id) !== 'string' && typeof (id) !== 'number') {\n            // TODO: Log error?\n            return;\n        }\n        id = id.toString();\n        var result;\n        for (var property in this.levels) {\n            if (this.levels.hasOwnProperty(property)) {\n                if (id.toUpperCase() === property.toUpperCase()\n                    || id == this.levels[property]) {\n                    result = {\n                        name: property,\n                        value: this.levels[property]\n                    };\n                }\n            }\n        }\n        return result;\n    };\n    return Logger;\n}());\n"],"sourceRoot":"/source/"}