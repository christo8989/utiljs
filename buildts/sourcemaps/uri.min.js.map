{"version":3,"sources":["uri.ts","uri.min.js"],"names":["Uri","this","protocol","location","host","hostname","port","path","removeTrailingSlash","pathname","queryString","search","replace","hash","Object","defineProperty","prototype","get","base","enumerable","configurable","url","Base","href","QueryString","length","hashString","Hash","Origin","queryDictionary","result","params","split","i","keyValue","key","value","Dictionary","parameter","name","Parameters","lastIndex","lastChar","charAt","slice"],"mappings":"AACA,YAEA,IAAAA,KAAA,WAaI,QAAAA,KACIC,KAAKC,SAAWC,SAASD,SACzBD,KAAKG,KAAOD,SAASE,SACrBJ,KAAKK,KAAOH,SAASG,MAAQ,MAC7BL,KAAKM,KAAON,KAAKO,oBAAoBL,SAASM,UAC9CR,KAAKS,YAAcP,SAASQ,OAAOC,QAAQ,IAAK,IAChDX,KAAKY,KAAOV,SAASU,KAAKD,QAAQ,IAAK,IAkG/C,MA5FIE,QAAAC,eAAIf,EAAAgB,UAAA,QCbAC,IDaJ,WAKI,MAJiB,OAAbhB,KAAKiB,OACLjB,KAAKiB,KAAUjB,KAAKC,SAAQ,KAAKD,KAAKG,KAAI,IAAIH,KAAKK,MAGhDL,KAAKiB,MCZZC,YAAY,EACZC,cAAc,IDiBlBN,OAAAC,eAAIf,EAAAgB,UAAA,UCXAC,IDWJ,WAKI,MAJgB,OAAZhB,KAAKoB,MACLpB,KAAKoB,IAAM,GAAGpB,KAAKqB,KAAOrB,KAAKM,MAG5BN,KAAKoB,KCVZF,YAAY,EACZC,cAAc,IDelBN,OAAAC,eAAIf,EAAAgB,UAAA,QCTAC,IDSJ,WACI,GAAiB,MAAbhB,KAAKsB,KAAc,CACnB,GAAIb,GAAcT,KAAKuB,YAAYC,OAAS,EACtC,IAAIxB,KAAKuB,YACT,GACFE,EAAazB,KAAK0B,KAAKF,OAAS,EAC9B,IAAIxB,KAAK0B,KACT,EACN1B,MAAKsB,KAAO,GAAGtB,KAAK2B,OAASlB,EAAcgB,EAG/C,MAAOzB,MAAKsB,MCRZJ,YAAY,EACZC,cAAc,IDalBN,OAAAC,eAAIf,EAAAgB,UAAA,eCPAC,IDOJ,WACI,MAAOhB,MAAKS,aCLZS,YAAY,EACZC,cAAc,IDUlBN,OAAAC,eAAIf,EAAAgB,UAAA,QCJAC,IDIJ,WACI,MAAOhB,MAAKY,MCFZM,YAAY,EACZC,cAAc,IDOlBN,OAAAC,eAAIf,EAAAgB,UAAA,cCDAC,IDCJ,WACI,GAA4B,MAAxBhB,KAAK4B,gBAAyB,CAG9B,IAAK,GAFDC,MACAC,EAAS9B,KAAKuB,YAAYQ,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAON,SAAUQ,EAAG,CACpC,GAAIC,GAAWH,EAAOE,GAAGD,MAAM,KAC3BG,EAAMD,EAAS,GACfE,EAAQF,EAAS,EACrBJ,GAAOK,GAAOC,EAElBnC,KAAK4B,gBAAkB,GAAIQ,YAAWP,GAG1C,MAAO7B,MAAK4B,iBCAZV,YAAY,EACZC,cAAc,IDMXpB,EAAAgB,UAAAsB,UAAP,SAAiBC,GACb,GAAIT,GAAS7B,KAAKuC,WAAWD,EAC7B,OAAOT,IAOH9B,EAAAgB,UAAAR,oBAAR,SAA4BD,GACxB,GAAIkC,GAAYlC,EAAKkB,OAAS,CAC9B,IAAIgB,GAAa,EAAG,CAChB,GAAIC,GAAWnC,EAAKoC,OAAOF,EACV,OAAbC,GACAnC,EAAKqC,MAAMH,GAGnB,MAAOlC,IAEfP","file":"uri.min.js","sourcesContent":["/// <reference path=\"./dictionary.ts\" />\r\n'use-strict';\r\n\r\nclass Uri {\r\n    // Example: https://www.domain.com:443/path/name?query=string#hash\r\n    private protocol: string; // https:\r\n    private host: string; // www.domain.com\r\n    private port: string; // 443 (default)\r\n    private path: string; // path/name\r\n    private queryString: string; // ?query=string\r\n    private hash: string; // hash\r\n    private base: string;\r\n    private url: string;\r\n    private href: string;\r\n    private queryDictionary: Dictionary;\r\n\r\n    public constructor() {\r\n        this.protocol = location.protocol;\r\n        this.host = location.hostname;\r\n        this.port = location.port || '443';\r\n        this.path = this.removeTrailingSlash(location.pathname);\r\n        this.queryString = location.search.replace('?', '');\r\n        this.hash = location.hash.replace('#', '');\r\n    }\r\n\r\n    /**\r\n     * Example: https://www.domain.com:443\r\n     */\r\n    get Base(): string {\r\n        if (this.base == null) {\r\n            this.base = `${this.protocol}//${this.host}:${this.port}`;\r\n        }\r\n\r\n        return this.base;\r\n    }\r\n\r\n    /**\r\n     * Example: https://www.domain.com:443/path/name\r\n     */\r\n    get Origin(): string {\r\n        if (this.url == null) {\r\n            this.url = `${this.Base}${this.path}`;\r\n        }\r\n\r\n        return this.url;\r\n    }\r\n\r\n    /**\r\n     * Example: https://www.domain.com:443/path/name?query=string#hash\r\n     */\r\n    get Href(): string {\r\n        if (this.href == null) {\r\n            let queryString = this.QueryString.length > 0\r\n                ? `?${this.QueryString}`\r\n                : '';\r\n            let hashString = this.Hash.length > 0\r\n                ? `#${this.Hash}`\r\n                : '';\r\n            this.href = `${this.Origin}${queryString}${hashString}`;\r\n        }\r\n\r\n        return this.href;\r\n    }\r\n\r\n    /**\r\n     * Example: query=string\r\n     */\r\n    get QueryString(): string {\r\n        return this.queryString;\r\n    }\r\n\r\n    /**\r\n     * Example: hash\r\n     */\r\n    get Hash(): string {\r\n        return this.hash;\r\n    }\r\n\r\n    /**\r\n     * Query parameters as a Dictionary.\r\n     */\r\n    get Parameters(): Dictionary {\r\n        if (this.queryDictionary == null) {\r\n            let result = {};\r\n            let params = this.QueryString.split('&');\r\n            for (let i = 0; i < params.length; ++i) {\r\n                let keyValue = params[i].split('=');\r\n                let key = keyValue[0];\r\n                let value = keyValue[1];\r\n                result[key] = value;\r\n            }\r\n            this.queryDictionary = new Dictionary(result);\r\n        }\r\n\r\n        return this.queryDictionary;\r\n    }\r\n\r\n    /**\r\n     * Returns the value of the specified query parameter.\r\n     * @param {string} name \r\n     */\r\n    public parameter(name: string): string {\r\n        let result = this.Parameters[name];\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Removes the trailing slash from a url.\r\n     * @param {string} path\r\n     */\r\n    private removeTrailingSlash(path: string): string {\r\n        let lastIndex = path.length - 1;\r\n        if (lastIndex >= 0) {\r\n            let lastChar = path.charAt(lastIndex);\r\n            if (lastChar === '/') {\r\n                path.slice(lastIndex);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n}\r\n","/// <reference path=\"./dictionary.ts\" />\n'use-strict';\nvar Uri = (function () {\n    function Uri() {\n        this.protocol = location.protocol;\n        this.host = location.hostname;\n        this.port = location.port || '443';\n        this.path = this.removeTrailingSlash(location.pathname);\n        this.queryString = location.search.replace('?', '');\n        this.hash = location.hash.replace('#', '');\n    }\n    Object.defineProperty(Uri.prototype, \"Base\", {\n        /**\n         * Example: https://www.domain.com:443\n         */\n        get: function () {\n            if (this.base == null) {\n                this.base = this.protocol + \"//\" + this.host + \":\" + this.port;\n            }\n            return this.base;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Uri.prototype, \"Origin\", {\n        /**\n         * Example: https://www.domain.com:443/path/name\n         */\n        get: function () {\n            if (this.url == null) {\n                this.url = \"\" + this.Base + this.path;\n            }\n            return this.url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Uri.prototype, \"Href\", {\n        /**\n         * Example: https://www.domain.com:443/path/name?query=string#hash\n         */\n        get: function () {\n            if (this.href == null) {\n                var queryString = this.QueryString.length > 0\n                    ? \"?\" + this.QueryString\n                    : '';\n                var hashString = this.Hash.length > 0\n                    ? \"#\" + this.Hash\n                    : '';\n                this.href = \"\" + this.Origin + queryString + hashString;\n            }\n            return this.href;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Uri.prototype, \"QueryString\", {\n        /**\n         * Example: query=string\n         */\n        get: function () {\n            return this.queryString;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Uri.prototype, \"Hash\", {\n        /**\n         * Example: hash\n         */\n        get: function () {\n            return this.hash;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Uri.prototype, \"Parameters\", {\n        /**\n         * Query parameters as a Dictionary.\n         */\n        get: function () {\n            if (this.queryDictionary == null) {\n                var result = {};\n                var params = this.QueryString.split('&');\n                for (var i = 0; i < params.length; ++i) {\n                    var keyValue = params[i].split('=');\n                    var key = keyValue[0];\n                    var value = keyValue[1];\n                    result[key] = value;\n                }\n                this.queryDictionary = new Dictionary(result);\n            }\n            return this.queryDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the value of the specified query parameter.\n     * @param {string} name\n     */\n    Uri.prototype.parameter = function (name) {\n        var result = this.Parameters[name];\n        return result;\n    };\n    /**\n     * Removes the trailing slash from a url.\n     * @param {string} path\n     */\n    Uri.prototype.removeTrailingSlash = function (path) {\n        var lastIndex = path.length - 1;\n        if (lastIndex >= 0) {\n            var lastChar = path.charAt(lastIndex);\n            if (lastChar === '/') {\n                path.slice(lastIndex);\n            }\n        }\n        return path;\n    };\n    return Uri;\n}());\n"],"sourceRoot":"/source/"}