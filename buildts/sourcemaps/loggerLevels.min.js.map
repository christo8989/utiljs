{"version":3,"sources":["loggerLevels.ts","loggerLevels.min.js"],"names":["LoggerLevels","this","defaultName","INFO","VERBOSE","Object","defineProperty","prototype","get","enumerable","configurable","value","name","getNameValuePair","id","result","DEFAULT_NAME","DEFAULT","toString","property","Enum","hasOwnProperty","toUpperCase"],"mappings":"AAAA,YAEA,IAAAA,cAAA,WAAA,QAAAA,KACYC,KAAAA,WAAU,EACVA,KAAAC,YAAc,OACdD,KAAAA,SACJE,KAAM,EACNC,QAAS,GA8DjB,MAxDIC,QAAAC,eAAIN,EAAAO,UAAA,WCCAC,IDDJ,WACI,MAAOP,MAAAA,YCGPQ,YAAY,EACZC,cAAc,IDElBL,OAAAC,eAAIN,EAAAO,UAAA,gBCIAC,IDJJ,WACI,MAAOP,MAAKC,aCMZO,YAAY,EACZC,cAAc,IDJlBL,OAAAC,eAAIN,EAAAO,UAAA,QCOAC,IDPJ,WACI,MAAOP,MAAAA,SCSPQ,YAAY,EACZC,cAAc,IDHXV,EAAAO,UAAAI,MAAP,SAAaC,GACT,MAAOX,MAAKY,iBAAiBD,GAAMD,OAOhCX,EAAAO,UAAAK,KAAP,SAAYD,GACR,MAAOV,MAAKY,iBAAiBF,GAAOC,MAQhCZ,EAAAO,UAAAM,iBAAR,SAAyBC,GAErB,GAAIC,IAAWH,KAAMX,KAAKe,aAAcL,MAAOV,KAAKgB,QACpD,IAAmB,gBAAT,IAAoC,gBAAT,GAEjC,MAAOF,EAGXD,GAAKA,EAAGI,UACR,KAAK,GAAIC,KAAYlB,MAAKmB,KAClBnB,KAAKmB,KAAKC,eAAeF,KACrBL,EAAGQ,gBAAkBH,EAASG,eAC3BR,GAAMb,KAAKmB,KAAKD,KACnBJ,EAAOH,KAAOO,EACdJ,EAAOJ,MAAQV,KAAKmB,KAAKD,IAIrC,OAAOJ,IAEff","file":"loggerLevels.min.js","sourcesContent":["'use-strict';\r\n\r\nclass LoggerLevels {\r\n    private default = 0;\r\n    private defaultName = 'INFO';\r\n    private enum = {\r\n        INFO: 0,\r\n        VERBOSE: 1,\r\n    };\r\n\r\n    /**\r\n     * Default enum value.\r\n     */\r\n    get DEFAULT(): number {\r\n        return this.default;\r\n    }\r\n\r\n    /**\r\n     * Default enum name.\r\n     */\r\n    get DEFAULT_NAME(): string {\r\n        return this.defaultName;\r\n    }\r\n\r\n    get Enum() {\r\n        return this.enum;\r\n    }\r\n\r\n    /**\r\n     * Returns the value of the specified enum name.\r\n     * @param {string} name \r\n     */\r\n    public value(name: string): number {\r\n        return this.getNameValuePair(name).value;\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the specified enum value.\r\n     * @param {number} value \r\n     */\r\n    public name(value: number): string {\r\n        return this.getNameValuePair(value).name;\r\n    }\r\n\r\n    /**\r\n     * Returns a specific name and vlaue based on the name or value.\r\n     * Note: id can be the name or value of the enumeration item.\r\n     * @param {string|number} id \r\n     */\r\n    private getNameValuePair(id: any) {\r\n        // TODO: Algorithmically set the default somehwere else.\r\n        let result = { name: this.DEFAULT_NAME, value: this.DEFAULT };\r\n        if (typeof(id) !== 'string' && typeof(id) !== 'number') {\r\n            // TODO: Log error?\r\n            return result;\r\n        }\r\n\r\n        id = id.toString();\r\n        for (let property in this.Enum) {\r\n            if (this.Enum.hasOwnProperty(property)) {\r\n                if (id.toUpperCase() === property.toUpperCase()\r\n                    || id == this.Enum[property]) { // tslint:disable-line\r\n                    result.name = property;\r\n                    result.value = this.Enum[property];\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","'use-strict';\nvar LoggerLevels = (function () {\n    function LoggerLevels() {\n        this.default = 0;\n        this.defaultName = 'INFO';\n        this.enum = {\n            INFO: 0,\n            VERBOSE: 1,\n        };\n    }\n    Object.defineProperty(LoggerLevels.prototype, \"DEFAULT\", {\n        /**\n         * Default enum value.\n         */\n        get: function () {\n            return this.default;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoggerLevels.prototype, \"DEFAULT_NAME\", {\n        /**\n         * Default enum name.\n         */\n        get: function () {\n            return this.defaultName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoggerLevels.prototype, \"Enum\", {\n        get: function () {\n            return this.enum;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the value of the specified enum name.\n     * @param {string} name\n     */\n    LoggerLevels.prototype.value = function (name) {\n        return this.getNameValuePair(name).value;\n    };\n    /**\n     * Returns the name of the specified enum value.\n     * @param {number} value\n     */\n    LoggerLevels.prototype.name = function (value) {\n        return this.getNameValuePair(value).name;\n    };\n    /**\n     * Returns a specific name and vlaue based on the name or value.\n     * Note: id can be the name or value of the enumeration item.\n     * @param {string|number} id\n     */\n    LoggerLevels.prototype.getNameValuePair = function (id) {\n        // TODO: Algorithmically set the default somehwere else.\n        var result = { name: this.DEFAULT_NAME, value: this.DEFAULT };\n        if (typeof (id) !== 'string' && typeof (id) !== 'number') {\n            // TODO: Log error?\n            return result;\n        }\n        id = id.toString();\n        for (var property in this.Enum) {\n            if (this.Enum.hasOwnProperty(property)) {\n                if (id.toUpperCase() === property.toUpperCase()\n                    || id == this.Enum[property]) {\n                    result.name = property;\n                    result.value = this.Enum[property];\n                }\n            }\n        }\n        return result;\n    };\n    return LoggerLevels;\n}());\n"],"sourceRoot":"/source/"}